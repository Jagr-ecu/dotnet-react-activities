INFRAESTRUCTURA
-   API referencia a Application e Infrastructure
-   Application referencia a Persistence y Domain
-   Domain no referencia a nadie
-   Infrastructure referencia a Application
-   Persistence referencia a Domain

COMANDOS INSTALACION
-   dotnet new globaljson //especificar version .net de proyecto
-   dotnet new sln
-   dotnet new webapi -n API
-   dotnet new classlib -n Application
-   dotnet new classlib -n Domain
-   dotnet new classlib -n Persistence
-   dotnet sln add API/API.csproj
-   dotnet sln add Application
-   dotnet sln add Persistence
-   dotnet sln add Domain
-   cd API
-   dotnet add reference ./Application
-   cd Application
-   dotnet add reference ./Persistence
-   dotnet add reference ./Domain
-   cd Persistence
-   dotnet add reference ./Domain

COMANDOS ENTITY
-   dotnet ef migrations add <NombreDeAccion> -p <Proyectode DataContext> -s <Proyectodearchivo start.cs>
-   dotnet ef migrations add <NombreDeAccion> -p <Persistence> -s <API>

REACT
-   la función de flecha se enlaza automaticamente con la clase
-   array.unshift añade item al inicio del arreglo

.NET
-   SignalR (web sockets) no tiene la habilidad de enviar un header de autorizacion
-   cors: Access-Control-Allow-Credentials para SignalR

SignalR
-   there are scaling issues when we want to keep clients connected to single server. When
    it comes to scaling signalR we need to think about how are w going to maintain our list
    of connections because signalR does not scale accross multiple servers. We need to 
    track the connections directly yourself, using something like redis for a distributed
    cache across each server or persist the connections in a database
